"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[121],{121:(e,n,t)=>{t.r(n),t.d(n,{default:()=>o});const o='---\nlayout: post\ntitle:      "(e)Mail Time!"\ndate:       2021-03-03 20:54:18 +0000\npermalink:  e_mail_time\n---\n\n\n<iframe src="https://giphy.com/embed/jGA9FxogzpaJa" width="480" height="360" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="https://giphy.com/gifs/mail-jGA9FxogzpaJa">via GIPHY</a></p>\n\nIt should come as no surprise that as someone who spent several years working in direct marketing that I would want to attempt to implement some email sends within an application. Like when a user signs up for an account, it would be great to send them an Welcome email. Or maybe I want to send them a weekly summary of their activity. Or remind them about something. There are plenty of times when sending an email to your users can be really valuable. Luckily, Rails has a handy tool to help with just that: Action Mailer\n\n\n### Go Configure\n\nThere are a few things we need to do to implement Action Mailer. If you generated your application with the `rails new` command, you\u2019re already in pretty good shape. You\u2019ll notice that a folder called mailers was automatically generated in the app folder. We\u2019ll come back to that in a second, but first there is a bit of configuration that needs to happen to make this all work.\n\nYou may be surprised to hear that you don\u2019t need to install any gems to get this to work, but that, my friend, is part of the magic of Rails. However, there are a few other things we need to do. For one, you may want to create a new email account to use, so you don\'t flood your personal email with a bunch of emails that aren\u2019t personal. And if you\u2019re going to use Gmail, like I did, you\u2019ll also need to update some security settings, which you may not be comfortable doing with your personal email account.\n\nYou\'ve created your new Gmail account. Now what? The first thing you\'ll need to do is go to Manage My Account and then to the security settings. In the security settings you\u2019ll see a section labeled "Less Secure App Access". Gmail recommends you have this turned off, but for our purposes we need to turn this on. Once that\'s turned on, stay in the security settings and find the section called "Signing in to Google". First, turn on 2-Step Verification. Once that\'s done, add an App password. When adding the App password, you can select "Mail" for the app and "Other" for the device. When it prompts you for a name, go ahead and call this whatever you want (something related to your app is fine, but this is just for you). This will generate a 16-digit password. Don\u2019t lose this! You\u2019ll need to add it to your application in a few minutes. But first, let\u2019s configure Action Mailer in our environment.\n\nSince we\'re in development right now, we\u2019ll go to config/environments/development.rb. Action Mailer uses the Mail gem, which handles email generation and does a lot of the work for us. Thanks to this gem, the only thing you need to do to configure Action Mailer is add the below lines of code to config/environments/development.rb:\n\n```\n# /config/environments/development.rb\n\n\u2026\n  config.action_mailer.delivery_method = :sendmail\n  config.action_mailer.perform_deliveries = true\n  config.action_mailer.raise_delivery_errors = true\n  config.action_mailer.default_options = {from: \'<username>\'}\n  config.action_mailer.delivery_method = :smtp\n  config.action_mailer.smtp_settings = {\n    address: \'smtp.gmail.com\',\n    port: 587,\n    domain: \'gmail.com\',\n    user_name: \'<username>\',\n    password: \'<password>\',\n    authentication: \'plain\',\n    enable_starttls_auto: true\n  }\n\u2026\n```\n\nThat all looks good, but right now we have placeholder information for our username and password. We need to figure out how to include this information in a secure way. The last thing we want to do is hardcode it and then push it up to GitHub for the world to see. There are a few ways to do this securely. We\u2019re going to use a file called local_env.yml.\n\nIn your config folder, create a file called local_env.yml. Before adding any information in this file, head over to your .gitignore file and add to the bottom `/config/local_env.yml`. This will ensure that when you push to GitHub it will ignore this file, keeping your credentials safe. Now you can go back to local_env.yml, and add your credentials. As for these credentials, you can set them up as key value pairs. For example:\n\n```\n# /config/local_env.yml\n\nGMAIL_USERNAME: "example@gmail.com"\nGMAIL_PASSWORD: \u201cpassword"\n```\n\nIf you head back over to config/environments/development.rb, you can use these ENV variables for your username and password, thus not exposing any of this information to the rest of the application:\n\n```\n# /config/environments/development.rb\n\n\u2026\n  config.action_mailer.delivery_method = :sendmail\n  config.action_mailer.perform_deliveries = true\n  config.action_mailer.raise_delivery_errors = true\n  config.action_mailer.default_options = {from: ENV[\'GMAIL_USERNAME\']}\n  config.action_mailer.delivery_method = :smtp\n  config.action_mailer.smtp_settings = {\n    address: \'smtp.gmail.com\',\n    port: 587,\n    domain: \'gmail.com\',\n    user_name: ENV[\'GMAIL_USERNAME\'],\n    password: ENV[\'GMAIL_PASSWORD\'],\n    authentication: \'plain\',\n    enable_starttls_auto: true\n  }\n\u2026\n```\n\nThe last housekeeping thing we need to do is in app/mailers/application_mailer.rb. Where it says `default from:`, put your ENV variable: `ENV[\u2018GMAIL_USERNAME\u2019]`. And that\'s it, our configuration is complete and we\'re ready to start working with Action Mailer!\n\n\n### And Action\u2026Mailer\n\n<iframe src="https://giphy.com/embed/3o6oziOWS36TN71gju" width="480" height="267" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="https://giphy.com/gifs/edbassmastershow-cmt-the-ed-bassmaster-show-3o6oziOWS36TN71gju">via GIPHY</a></p>\n\n\nGenerating a mailer is just like generating anything else in Rails, which means we can use the command line. For this example, we\u2019ll generate a User Mailer, and from that User Mailer we\u2019ll send a Welcome email when a user creates an account. If you\u2019re familiar with Rails, you can probably guess what the command will look like. But just in case, I\u2019ll give you a hint: `rails g mailer UserMailer`. This is going to generate a few things for you:\n\n1. A file in your mailers folder called user_mailer.rb\n2. A folder nested within your views folder called user_mailer (for any views you end up creating)\n3. A couple of test files\n\nNow that we have our mailer generated, here\u2019s a quick overview of what we\u2019re about to do. First, we\u2019re going to create an action in user_mailer.rb, and along with this action we\u2019ll create a corresponding view of the same name (Rails will know to find the view with the same name as our action, because Rails is awesome). Next, we need to figure out when we want the email sent. In our case, we want to send an email when a user signs up for an account, so we\u2019ll edit our `create` action in our Users Controller to call our mailer action which will trigger the email send when a user is created. Now that you know what the plan is, let\u2019s get to it.\n\nIn the UserMailer, we can create our action. Right now you\'re probably thinking, "I\'ve never written any code in a mailer before, I have no idea what I\'m doing!" Don\'t worry, it\'s okay! Writing code in a mailer file is very similar to writing code in a controller. Since we\u2019re sending a welcome email, we can call this action `welcome_email`. Before writing anything in the body of the action, I like to set up my view (which is the actual email that gets sent), because then I know what information I need to have access to. When setting up your views you want to create an HTML file and a text file. This ensures that if HTML isn\u2019t supported, your user will receive the text version of the email (instead of no email at all). Your files will be named after your action: `welcome_email.html.erb` and `welcome_email.text.erb`. The content in these two files will be exactly the same, the only difference being that in the HTML file you can include HTML tags for formatting. Maybe it will look something like this:\n\n```\n# /app/views/user_mailer/welcome_email.html.erb\n\n<h4>Welcome, <%= @user.first_name %>!</h4>\n<br>\n<p>We\u2019re so excited to have you on board. Thanks for creating an account with us.</p>\n<br>\n<p>See you soon!</p>\n```\n\nYour text file would just look like this:\n\n```\n# /app/views/user_mailer/welcome_email.text.erb\n\nWelcome, <%= @user.first_name %>!\n\nWe\u2019re so excited to have you on board. Thanks for creating an account with us.\n\nSee you soon!\n```\n\nNow that we have that all set up, we can see that the only information we need to pass from the `welcome_email` action is the user instance so we can grab the first name. Let\u2019s write the body of our `welcome_email` action. Since we will be accessing `@user` in the view, we need to set `@user` in `welcome_email`. When we move on to our controller action, we can pass the user instance as a param to `welcome_email` and access it with `params[:user]`, so for now we can set `@user = params[:user]`. Next, we need to include the `mail` attribute where we\'ll set the `:to` and `:subject` (among other things, if you wish). Overall, my `welcome_email` action looks like this:\n\n```\n# /app/mailers/user_mailer.rb\n\n\u2026\n  def welcome_email\n    @user = params[:user]\n\n    mail(to: @user.email, subject: "Welcome, #{@user.username}!")\n  end\n\u2026\n```\n\nWith that, we can update our controller action, knowing the only param we need to pass to `welcome_email` is the user instance.\n\nLike we decided before, this is a Welcome email that should be sent when a user creates an account. We already have a controller action where this is happening \u2014 `create`! Right now, I have a create action that looks like this:\n\n```\n# /app/controllers/users_controller.rb\n\n\u2026\n  def create\n    @user = User.new(user_params)\n    if @user.save\n      session[:user_id] = @user.id\n      redirect_to user_path(@user)\n    else\n      render :new\n    end\n  end\n\u2026\n```\n\nRight before I redirect to `user_path(@user)`, I\u2019m going to make a call to `UserMailer`, pass in the parameters I need, `@user` in this case, and tell that mailer to deliver my Welcome email right now. I\u2019m going to tell it to deliver now since I\u2019m still in development mode and testing this feature. You also have the option to tell it to deliver later, in which case it will run anything else it needs to run before worrying about sending the email. My new create method looks like this:\n\n```\n# /app/controllers/users_controller.rb\n\n\u2026\n  def create\n    @user = User.new(user_params)\n    if @user.save\n      session[:user_id] = @user.id\n      # Update deliver_now to deliver_later before moving to production environment\n      UserMailer.with(user: @user).welcome_email.deliver_now\n      redirect_to user_path(@user)\n    else\n      render :new\n    end\n  end\n\u2026\n```\n\nNow, if you sign up for an account, you should receive a Welcome email! Wahoo!\n\nYou can set up emails for any event you\u2019d like. But be careful not to bombard your users. The last thing you want is to go through all the trouble of setting up Action Mailer only for your emails to get deleted immediately, or worse, marked as spam!\n\n<iframe src="https://giphy.com/embed/Hae1NrAQWyKA" width="480" height="480" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="https://giphy.com/gifs/spam-Hae1NrAQWyKA">via GIPHY</a></p>\n\n\n##### Sources\n\n<a href="https://guides.rubyonrails.org/action_mailer_basics.html">Rails Action Mailer Documentation</a>\n<a href="https://support.google.com/accounts/answer/185833?hl=en">Gmail App Password</a>\n<a href="https://github.com/mikel/mail/">Mail Gem</a>\n<a href="http://railsapps.github.io/rails-environment-variables.html">Environment Variables</a>\n'}}]);
//# sourceMappingURL=121.20bc070a.chunk.js.map